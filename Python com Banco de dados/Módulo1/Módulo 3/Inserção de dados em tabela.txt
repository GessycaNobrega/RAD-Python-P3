Para inserir registros em uma tabela, utilizamos o comando INSERT INTO, do SQL.



Para ilustrar a utilização desse comando, vamos inserir o seguinte registro na tabela Pessoa:

CPF: 12345678900

Nome: João

Data de Nascimento: 31/01/2000

Usa óculos: Sim (True)

O Comando SQL para inserção desses dados é o seguinte:

INSERT INTO Pessoa (cpf, nome, nascimento, oculos)
VALUES (12345678900, 'João', '2000-01-31', 1);

Observe que alteramos a formatação da data para se adequar ao padrão de alguns bancos de dados, como MySQL e PostgreSQL.


Inserção de dados em tabela com queries dinâmicas:

Para indicar que a string de um comando contém parâmetros que precisam ser substituídos antes da sua execução, utilizamos delimitadores. Esses delimitadores também estão previstos na PEP 249 e podem ser: “?”, “%s”, entre outros.


Na biblioteca do SQLite, utilizamos o delimitador “?”.

Para ilustrar a utilização do delimitador “?” em SQLite, considere o comando a seguir: >>> comando = “INSERT INTO tabela1 (atributo1, atributo2) VALUES (?, ?);”  => Esse comando indica que, ao ser chamado pelo método execute, devemos passar dois parâmetros, um para cada interrogação. Esses parâmetros precisam estar em um iterável, como em uma tupla ou lista.


Veja a seguir como poderia ficar a chamada do método execute para esse comando:
cursor.execute(comando, (“Teste”, 123))

A partir da string e da tupla, é montado o comando final, que é traduzido para:
“INSERT INTO tabela1 (atributo1, atributo2) VALUES (‘Teste’, 123);”



#criação de um objeto do tipo Pessoa:
pessoa = Pessoa(1111111111, "Maria", '1998-06-13', False)
=> Na linha 9, utilizamos o construtor da classe Pessoa para criar um objeto com os seguintes atributos: CPF: 10000000099, Nome: Maria, Data de Nascimento: 31/01/1990 e Usa óculos: Não (False). O valor False será convertido para 0 durante a execução do método execute.






DEFINIÇÃO DE UM COMANDO COM QUERY PARAMENTER:

'''INSERT INTO Pessoa(cpf, nome, nascimento, oculos) Values (?,?,?,?);'''
cursor.execute(comando (pessoa.cpf, pessoa.nome, pessoa.nascimento, pessoa.usa_oculos)) => Na linha 12, definimos a string que conterá o comando para inserir um registro na tabela Pessoa. Observe como estão representados os valores dos atributos! Estão todos com o delimitador representado pelo caractere interrogação (?)!


cursor.execute(comando (pessoa.cpf, pessoa.nome, pessoa.nascimento, pessoa.usa_oculos)) => Na linha 13, chamamos o método execute utilizando, como segundo argumento, uma tupla com os atributos do objeto pessoa 

Cada elemento dessa tupla irá ocupar o lugar de uma interrogação, respeitando a ordem com que aparecem na tupla.


O comando final enviado ao banco de dados pelo comando execute foi:

INSERT INTO Pessoa (cpf, nome, nascimento, oculos)
VALUES (10000000099, 'Maria', '1990-01-31', 0);



 Inserção de dados em tabela com queries dinâmicas e nomes

 Além da utilização do caractere “?” como delimitador de parâmetros, o sqlite3 também possibilita a utilização de argumentos nomeados.

A utilização de argumentos nomeados funciona de forma similar à chamada de funções utilizando os nomes dos parâmetros.

Nessa forma de construção de queries dinâmicas, ao invés de passar uma tupla, devemos passar um dicionário para o método execute. Ele será utilizado para preencher corretamente os valores dos atributos.


Para ilustrar a utilização dos argumentos nomeados em SQLite, considere o comando a seguir:
>>> comando = INSERT INTO tabela1 (atributo1, atributo2) VALUES (:atrib1, :atrib2);

Esse comando indica que ao ser chamado pelo método execute, devemos passar um dicionário com duas chaves, sendo uma “atrib1” e outra “atrib2”. Observe que há dois pontos (“:”) antes do argumento nomeado!

Veja a seguir como poderia ficar a chamada do método execute para esse comando:
>>> cursor.execute(comando, {“atrib1”:“Teste”, “atrib2”: 123})


Observe o exemplo da Figura 14, onde vamos criar um script similar ao anterior, no qual vamos utilizar novamente a classe Pessoa, porém o comando para inserir um registro no banco de dados utiliza os argumentos nomeados.

import sqlite3 as conector
from modelo import Pessoa

# Abertura de conexão e aquisição de cursor
conexao = conector.connect("./meu_banco.db")
cursor = conexao.cursor()


#Criação de um objeto do tipo de pessoa
pessoa = Pessoa(20000000030, 'jose', '1990-02-28', False)


#Definição de um comando com query paramenter
comando = '''INSERT INTO TABLE Pessoa (cpf, nome, nascimento, oculos)
                    VALUES (:cpf, :nome, :data_nascimento, :usa_oculos);'''
cursor.execute(comando, {"cpf": pessoa.cpf,
                         "nome": pessoa.nome,
                         "data_nascimento": pessoa.data_nascimento,
                         "usa_oculos": pessoa.usa_oculos})


O comando final enviado ao banco de dados pelo comando execute foi: INSERT INTO Pessoa (cpf, nome, nascimento, oculos)
VALUES (20000000099,'José','1990-02-28',0);


Observe que nosso código está crescendo. Imagine se tivéssemos uma entidade com dezenas de atributos? A chamada do método execute da linha 14 cresceria proporcionalmente, comprometendo muito a leitura do nosso código.

A seguir, vamos simplificar nosso código, de forma que ele permaneça legível, independentemente do número de atributos de uma entidade.

Como vamos inserir uma pessoa com todos os atributos, vamos manter apenas os argumentos nomeados no comando SQL


No próximo exemplo, vamos simplificar mais um pouco nosso código, removendo o nome das colunas no comando SQL e utilizando a função interna vars do Python que converte objetos em dicionários. 




#Definição de um comando com named paramenter
comando = '''INSERT INTO TABLE Pessoa (cpf, nome, nascimento, oculos)
                    VALUES (:cpf, :nome, :data_nascimento, :usa_oculos);'''
cursor.execute(comando, vars(Pessoa))
print(vars(Pessoa))


Na linha 12, criamos o comando SQL “INSERT INTO”, onde suprimimos o nome das colunas após o nome da tabela Pessoa.

Na linha 13, utilizamos o método execute passando como segundo argumento vars(pessoa).

A função interna vars retorna todos os atributos de um objeto na forma de dicionário, no qual cada chave é o nome de um atributo.

Observe na saída do console onde imprimimos o resultado de vars(pessoa), linha 14, e destacado a seguir:

{'cpf': 30000000099, 'nome': 'Silva', 'data_nascimento': '1990-03-30', 'usa_oculos': True}

O comando final enviado ao banco de dados pelo comando execute foi:


INSERT INTO Pessoa VALUES (30000000099,'Silva','1990-03-30',1);


Atualização de dados em uma tabela

Agora que já sabemos como inserir um registro em uma tabela, vamos aprender a atualizar os dados de um registro.

Para atualizar um registro, utilizamos o comando SQL UPDATE. Sua sintaxe é a seguinte:


UPDATE tabela1
SET coluna1 = valor1, coluna2 = valor2...
WHERE [condição];




No exemplo a seguir, Figura 18, vamos mostrar como atualizar registros de uma tabela utilizando os três métodos:

Uma string sem delimitadores, uma string com o delimitador “?” ou uma string com argumentos nomeados.


Import sql3 as conector

#Abertura da conexão e aquisisção de cursor
conexao = cursor.connect("./meu_banco.db")
conexao.execute("PRAGMA foreign_keys = on")
cursor = conexao.cursor()



#Definição dos comandos

comando1 = '''UPDATE Pessoa SET oculos= 1;'''
cursor.execute(comando1)

No comando1, estamos atualizando o valor do atributo oculos para 1 (verdadeiro) para TODOS os registros da tabela. Isso ocorreu, pois a cláusula WHERE foi omitida.

*****************************************************************

comando2 = ''' UPDATE Pessoa SET oculos = ? WHERE cpf=12345678930;'''
cursor.execute(comando2, (False,))

Ou seja, vamos alterar o valor do atributo oculos para zero (falso) apenas para quem tem cpf igual a 30000000099.
***********************************************************************

comando3 = ''' UPDATE Pessoa SET oculos = :usa_oculos WHERE cpf= :cpf;'''
cursor.execute(comando3, {"usa_oculos":FAlse, "cpf":20516489720})

Na linha 15, criamos mais um comando de UPDATE, desta vez utilizando o argumento nomeado tanto para o atributo oculos quanto para o cpf da clausula WHERE.

Onde vamos alterar o valor do atributo oculos para zero (falso) para quem tem cpf igual a 20000000099.

