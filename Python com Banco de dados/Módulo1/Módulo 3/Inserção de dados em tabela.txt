Para inserir registros em uma tabela, utilizamos o comando INSERT INTO, do SQL.



Para ilustrar a utilização desse comando, vamos inserir o seguinte registro na tabela Pessoa:

CPF: 12345678900

Nome: João

Data de Nascimento: 31/01/2000

Usa óculos: Sim (True)

O Comando SQL para inserção desses dados é o seguinte:

INSERT INTO Pessoa (cpf, nome, nascimento, oculos)
VALUES (12345678900, 'João', '2000-01-31', 1);

Observe que alteramos a formatação da data para se adequar ao padrão de alguns bancos de dados, como MySQL e PostgreSQL.


Inserção de dados em tabela com queries dinâmicas:

Para indicar que a string de um comando contém parâmetros que precisam ser substituídos antes da sua execução, utilizamos delimitadores. Esses delimitadores também estão previstos na PEP 249 e podem ser: “?”, “%s”, entre outros.


Na biblioteca do SQLite, utilizamos o delimitador “?”.

Para ilustrar a utilização do delimitador “?” em SQLite, considere o comando a seguir: >>> comando = “INSERT INTO tabela1 (atributo1, atributo2) VALUES (?, ?);”  => Esse comando indica que, ao ser chamado pelo método execute, devemos passar dois parâmetros, um para cada interrogação. Esses parâmetros precisam estar em um iterável, como em uma tupla ou lista.


Veja a seguir como poderia ficar a chamada do método execute para esse comando:
cursor.execute(comando, (“Teste”, 123))

A partir da string e da tupla, é montado o comando final, que é traduzido para:
“INSERT INTO tabela1 (atributo1, atributo2) VALUES (‘Teste’, 123);”



#criação de um objeto do tipo Pessoa:
pessoa = Pessoa(1111111111, "Maria", '1998-06-13', False)
=> Na linha 9, utilizamos o construtor da classe Pessoa para criar um objeto com os seguintes atributos: CPF: 10000000099, Nome: Maria, Data de Nascimento: 31/01/1990 e Usa óculos: Não (False). O valor False será convertido para 0 durante a execução do método execute.






DEFINIÇÃO DE UM COMANDO COM QUERY PARAMENTER:

'''INSERT INTO Pessoa(cpf, nome, nascimento, oculos) Values (?,?,?,?);'''
cursor.execute(comando (pessoa.cpf, pessoa.nome, pessoa.nascimento, pessoa.usa_oculos)) => Na linha 12, definimos a string que conterá o comando para inserir um registro na tabela Pessoa. Observe como estão representados os valores dos atributos! Estão todos com o delimitador representado pelo caractere interrogação (?)!


cursor.execute(comando (pessoa.cpf, pessoa.nome, pessoa.nascimento, pessoa.usa_oculos)) => Na linha 13, chamamos o método execute utilizando, como segundo argumento, uma tupla com os atributos do objeto pessoa 

Cada elemento dessa tupla irá ocupar o lugar de uma interrogação, respeitando a ordem com que aparecem na tupla.


O comando final enviado ao banco de dados pelo comando execute foi:

INSERT INTO Pessoa (cpf, nome, nascimento, oculos)
VALUES (10000000099, 'Maria', '1990-01-31', 0);



 Inserção de dados em tabela com queries dinâmicas e nomes

 Além da utilização do caractere “?” como delimitador de parâmetros, o sqlite3 também possibilita a utilização de argumentos nomeados.

A utilização de argumentos nomeados funciona de forma similar à chamada de funções utilizando os nomes dos parâmetros.

Nessa forma de construção de queries dinâmicas, ao invés de passar uma tupla, devemos passar um dicionário para o método execute. Ele será utilizado para preencher corretamente os valores dos atributos.


Para ilustrar a utilização dos argumentos nomeados em SQLite, considere o comando a seguir:
>>> comando = INSERT INTO tabela1 (atributo1, atributo2) VALUES (:atrib1, :atrib2);

Esse comando indica que ao ser chamado pelo método execute, devemos passar um dicionário com duas chaves, sendo uma “atrib1” e outra “atrib2”. Observe que há dois pontos (“:”) antes do argumento nomeado!

Veja a seguir como poderia ficar a chamada do método execute para esse comando:
>>> cursor.execute(comando, {“atrib1”:“Teste”, “atrib2”: 123})


Observe o exemplo da Figura 14, onde vamos criar um script similar ao anterior, no qual vamos utilizar novamente a classe Pessoa, porém o comando para inserir um registro no banco de dados utiliza os argumentos nomeados.

import sqlite3 as conector
from modelo import Pessoa

# Abertura de conexão e aquisição de cursor
conexao = conector.connect("./meu_banco.db")
cursor = conexao.cursor()


#Criação de um objeto do tipo de pessoa
